name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up AWS CLI
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Log in to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 4: Build and push Docker images
    - name: Build and Push Docker Images
      run: |
        IMAGE_NAME=otel-demo
        TAG=$(git rev-parse --short HEAD)
        docker build -t $IMAGE_NAME:$TAG .
        docker tag $IMAGE_NAME:$TAG ${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME:$TAG
        docker push ${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME:$TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Step 1: Checkout code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up AWS CLI
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Deploy to EKS
    - name: Update Kubernetes Resources
      run: |
        aws eks update-kubeconfig --name otel-demo-cluster
        kubectl apply -f kubernetes-manifests/
