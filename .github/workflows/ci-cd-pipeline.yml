name: EKS Deployment Workflow

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: enpm818n-finalproject-g3
  CLUSTER_NAME: otel-demo-newcluster
  DEPLOYMENT_NAME: otel-demo-deployment
  CONTAINER_NAME: otel-demo-container
  NAMESPACE: otel-demo

jobs:
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Configure AWS CLI
    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region $AWS_REGION

    # Step 3: Authenticate to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

    # Step 4: Build and push Docker image
    - name: Build and Push Docker Image
      run: |
        IMAGE_NAME=${ECR_REPOSITORY}
        TAG=$(git rev-parse --short HEAD)
        docker build -t $IMAGE_NAME:$TAG .
        docker tag $IMAGE_NAME:$TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$TAG
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$TAG

    # Step 5: Update the Kubernetes deployment
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
        kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$TAG -n $NAMESPACE
        kubectl rollout restart deployment/$DEPLOYMENT_NAME -n $NAMESPACE
